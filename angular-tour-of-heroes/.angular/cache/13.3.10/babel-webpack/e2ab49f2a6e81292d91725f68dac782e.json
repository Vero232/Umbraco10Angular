{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let HeroService = /*#__PURE__*/(() => {\n  class HeroService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.heroesUrl = 'api/hero';\n      this.path = 'Umbraco/Api/Hero'; // private path = 'Umbraco/Api/Hero/UpdateHero'\n      // private api = environment.baseUrl + 'api/hero';\n\n      this.api = `${environment.baseUrl}${this.path}`;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    getHeroesFromApi() {\n      return this.http.get(`${this.api}${'/GetAllHeroes'}`).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n    }\n\n    addHeroApi(hero) {\n      return this.http.post(`${this.api}${'/CreateCommonHero'}`, hero, this.httpOptions).pipe( // tap(_ => this.log(`add hero id=${hero.id}`)),\n      catchError(this.handleError('addHero')));\n    }\n\n    getHeroes() {\n      return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n    }\n\n    getHero(id) {\n      const url = `${this.heroesUrl}/${id}`;\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n    }\n\n    updateHero(hero) {\n      return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n    }\n    /** POST: add a new hero to the server */\n\n\n    addHero(hero) {\n      return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n    }\n\n    deleteHero(id) {\n      const url = `${this.heroesUrl}/${id}`;\n      return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n    }\n\n    searchHeroes(term) {\n      if (!term.trim()) {\n        // if not search term, return empty hero array.\n        return of([]);\n      }\n\n      return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching \"${term}\"`) : this.log(`no heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n\n    log(message) {\n      this.messageService.add(`HeroService: ${message}`);\n    }\n\n  }\n\n  HeroService.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  HeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n  return HeroService;\n})();","map":null,"metadata":{},"sourceType":"module"}